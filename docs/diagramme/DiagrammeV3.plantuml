
@startuml Avatar


package Application{
    interface Avatar {
        ui
        top(): MainFrame
        reinit():Unit
    }
    interface UI{
        chatArea
        inputField
        sendButton
        resetButton
        vocalButton
        avatarIcon
        userIcon
    }
}


package DB {
    interface LangDAO{
        dbFilePath
        getMotsLang(l: Int): List[String]
        politesse(l: Int): List[String]
        recherche(l: Int): List[String]
        nom(l: Int): String
        vrai(l: Int): String
        faux(l: Int): String
        reponseUni(l: Int): String
        inconnu(l: Int): String
        demandeLieux(l: Int): String
        demandeLang(l: Int): String
        demandeChoix(l: Int): String
        multReponse(l: Int): String
        getMotsRest(l:Int):List[String]
    }
    interface ListLieuxDAO{
        dbFilePath
        ajouterDonnee(nom: String, adresse: String): Unit
        deleteByNom(nom: String): Unit
        getNom(): List[String]
        getAdresse(nom: String): Option[String]
        getNomReel(nom: String): Option[String]
    }
    interface LieuxXMLDAO{
        dbFilePath
        getAdresseId(id: String): Option[String]
        getId(mots: List[String]): Option[List[String]]
        getNameId(id: String): Option[String]
        listeMotsUniques(): List[String]
        getNom(): List[String]

    }
    interface XmltoDb
}


package Machine{
    interface MachineImpl{
        ask(s: String): List[String]
        reinit(): Unit
        test(l: List[String]): List[String]
    }
}


package Outils{
    interface CreationListMotClef{
        dsbLieuxBase
        dsbLieuxXML
        MatchMotClef(Mots : List[String],l:Int): (String,List[(String, String)])
        RecupPoli(mots: List[String],dsbPolitesse :List[String]): Int
        RecupLieux(mot: String): String
        RecupNomReel(mot: String): String
        RecupNomXML(id:String):String
        RecupAdrXML(id:String):String
    }
    interface AnalysePhrase{
        SepMots(s:String): List[String]
        compartList(lMotsBdd: List[String],lMotsRequet: List[String]): Boolean 
        areEqualIgnoreCaseAndAccents(char1: Char, char2: Char): Boolean
        removeWords(mots: List[String], motsSupp: List[String]): List[String]
        VerifLang(l:Int,mots :List[String]):Int
        VerifLangCorrect(l:Int,mots :List[String]):Int
        premierNombreDansString(chaine: String): Option[Int]
        combinaisons[T](liste: List[T], acc: List[List[T]]): List[List[T]]
        rechercheResto(mots :List[String],Resto :List[String]):Option[List[String]]
        replaceHtmlEntities(phrase: String): String
    }
    interface CreationDeRep{
        langues
        action
        memoire
        Reponse(message: String): String
        formatReponse(reponse: List[String]): String
        reInit(): Unit
    }
    interface Correction{
        correct(mots: List[String], motsCorrect: List[String],min :Int): (List[String],List[String])
        correctMot(mot: String, motsCorrect: List[String]): String
        compartMot(s1: String, s2: String): Option[String]
        hammingDistance(s1: String, s2: String): Int
    }
}

package "Base de donnes"{
    class BDListLieux <<(B,Orange)>>{
        nom 
        adresse
        nomReel
    }
    package LieuxXml{
        class BDOrganisation<<(B,Orange)>>{
            id VARCHAR(50) PRIMARY KEY,
            acronym VARCHAR(50),
            name VARCHAR(255) NOT NULL,
            description TEXT,
            email VARCHAR(255),
            web VARCHAR(255),
            schedule TEXT,
            theme VARCHAR(255) NOT NULL,
            receptiontype VARCHAR(255)
        }
        class BDDAdresses<<(B,Orange)>>{
            id INT PRIMARY KEY AUTO_INCREMENT,
            organization_id VARCHAR(50) FOREIGN KEY (organization_id),
            street_number VARCHAR(50),
            street_extension VARCHAR(50),
            building VARCHAR(50),
            street_name VARCHAR(255) ,
            zipcode VARCHAR(50) NOT NULL,
            pobox VARCHAR(50),
            city VARCHAR(255),
            district VARCHAR(255),
            phone VARCHAR(50),
            fax VARCHAR(50),
            latitude VARCHAR(50),
            longitude VARCHAR(50),
            accessibility TEXT
        }
    }
    class BDLang <<(B,Orange)>>{
        id INT PRIMARY KEY,
        nom VARCHAR(50),
        politesse TEXT[],
        recherche TEXT[],
        vrai VARCHAR(50),
        faux VARCHAR(50),
        reponse_unique TEXT[],
        inconnu VARCHAR(50),
        demande_lang VARCHAR(50),
        demande VARCHAR(50),
        choix_multiple TEXT[],
        demande_choix VARCHAR(50),
        mots_site TEXT[],
        liaison TEXT[]

    }
    class vArXML<<(X , Pink)>>
}

package OutilHtml{
    object AnalysePageObjet{
        getNomAdres(mots :List[String]):Option[(String,String)]
        resultatsPage(url: String): Option[(String,String)] 
        urlToHtml(url: String): Html
        obtenir1liens(h: Html): Option[String]
        obtenirAdr(h: Html): Option[String]
        obtenirAdr(h: Html): Option[String]
    }
    object OutilsWebObjet{
        cleaner
        props
        nomHote(url: String): String
        obtenirHtml(url: String): Html
        javaList2ScalaList[T](l: java.util.List[T]): List[T]
        tag2Html(tn: BaseToken): Html
        combinerUrls(base: String, local: String): String
    }
}
    
ListLieuxDAO --> CreationListMotClef
LangDAO --> CreationListMotClef
AnalysePhrase --> CreationListMotClef
LangDAO --> AnalysePhrase
Correction --> AnalysePhrase
AnalysePhrase --> Correction
LangDAO --> CreationDeRep
AnalysePhrase --> CreationDeRep
CreationListMotClef --> CreationDeRep
BDLang --|> LangDAO
BDListLieux--|> ListLieuxDAO
Avatar --> MachineImpl
CreationDeRep --> MachineImpl
UI --> Avatar
LieuxXml --|> LieuxXMLDAO
OutilsWebObjet --> AnalysePageObjet
AnalysePageObjet --> CreationListMotClef
LieuxXMLDAO --> CreationListMotClef

@enduml