import java.sql.{Connection, DriverManager, Statement}

object Database {
  def main(args: Array[String]): Unit = {
    // register SQLite JDBC driver
    Class.forName("org.sqlite.JDBC")

    // create a connection to the database
    val url = "jdbc:sqlite:BaseDeDonnees/ListLieux.db"
    val connection: Connection = DriverManager.getConnection(url)

    // create a statement
    val statement: Statement = connection.createStatement()

    // create a table
    statement.executeUpdate(
      """
        |CREATE TABLE IF NOT EXISTS lieux (
        | nom TEXT NOT NULL,
        | adresse TEXT NOT NULL
        |);
        |""".stripMargin)

    // insert data into the table
    statement.executeUpdate(
      """
        |INSERT INTO lieux (nom, adresse)
        |VALUES ('Mairie de Rennes', 'Place de la Mairie'),
        |       ('Théâtre La Paillette', '2, Rue du Pré de Bris'),
        |       ('Théâtre National de Bretagne', '1, Rue Saint-Hélier'),
        |       ('Gare SNCF', '19, Place de la Gare');
        |""".stripMargin)

    // print the contents of the table
    val resultSet = statement.executeQuery("SELECT * FROM lieux")
    while (resultSet.next()) {
      val nom = resultSet.getString("nom")
      val adresse = resultSet.getString("adresse")
      println(s"$nom : $adresse")
    }

    // close the connection
    resultSet.close()
    statement.close()
    connection.close()
  }
}


val url = "jdbc:sqlite:BaseDeDonnees/Politesse.db"
|CREATE TABLE IF NOT EXISTS Politesse (
            | Adresse TEXT NOT NULL,
            | Reponse TEXT NOT NULL
            |);
INSERT INTO Politesse (Adresse, Reponse)
VALUES 
    ('Bonjour', 'Bonjour, '),
    ('Bonsoir', 'Bonsoir, '),
    ('Au revoir', 'Au revoir, à bientôt !'),
    ('Merci beaucoup', 'De rien, c''est un plaisir !'),
    ('Excusez-moi', 'Je vous en prie, pas de souci !'),
    ('Pardon', 'Pas de problème, cela peut arriver !'),
    ('Bonne soirée', 'Merci, à vous aussi !'),
    ('Bonne nuit', 'Bonne nuit, faites de beaux rêves !'),
    ('Hello', 'Hello, '),
    ('Hey', 'Hey, '),
    ('Salut', 'Salut, ');



-----------------------------------------------------------------------------------------------------------------
mots.flatMap { mot =>
    mot match {
      case motAvecApostrophe if motAvecApostrophe.endsWith("'") =>
        List(motAvecApostrophe.dropRight(1), "'")
      case motAvecApostrophe if motAvecApostrophe.contains("'") =>
        val (avantApostrophe, apresApostrophe) = motAvecApostrophe.splitAt(motAvecApostrophe.indexOf("'")+1)
        List(avantApostrophe, apresApostrophe)
      case _ => List(mot)
    }
  }.toList

-------------------------------------------------------------------------------------------------------------------

package DB

import java.sql._
import java.io.File
/**
 * Cette classe permet d'accéder à la table "Politesse" de la base de données "Politesse.db"
 */
object  PolitesseDAO {
    // Établir une connexion à la base de données
    val dbFilePath = "BaseDeDonnees/Politesse.db"
    // Vérification que le fichier existe

    if (!new File(dbFilePath).exists() || !new File(dbFilePath).isFile()) {
        throw new RuntimeException("Le fichier de base de données n'existe pas ou n'est pas un fichier valide.")
    }

    val connection = DriverManager.getConnection("jdbc:sqlite:" + dbFilePath)

    /**
     * Ajouter une donnée à la table "Politesse"
     * @param adresse l'adresse à ajouter à la table
     * @param reponse la réponse associée à l'adresse
     */
    def ajouterDonnee(adresse: String, reponse: String): Unit = {
        val statement = connection.prepareStatement("INSERT INTO Politesse (Adresse, Reponse) VALUES (?, ?)")
        statement.setString(1, adresse)
        statement.setString(2, reponse)
        statement.executeUpdate()
        statement.close()
    }
    /**
     * Supprime une ligne dans la table "Politesse" en fonction de l'adresse donnée
     * @param adresse l'adresse de la ligne à supprimer
     */
    def deleteByAdresse(adresse: String): Unit = {
        val stmt: Statement = connection.createStatement()
        val query: String = s"DELETE FROM Politesse WHERE Adresse = '$adresse'"
        stmt.executeUpdate(query)
        stmt.close()
    }
    /**
     * Récupère la liste des adresses présentes dans la table "Politesse"
     * @return une liste des adresses
     */
    def getAdresses(): List[String] = {
        val statement = connection.createStatement()
        val resultSet = statement.executeQuery("SELECT Adresse FROM Politesse")
        var adresses = List[String]()
        while (resultSet.next()) {
            val adresse = resultSet.getString("Adresse")
            adresses = adresse :: adresses
        }
        resultSet.close()
        statement.close()
        adresses
    }

    /**
     * Récupère la réponse associée à l'adresse donnée
     * @param adresse l'adresse de la réponse recherchée
     * @return une Option[String] contenant la réponse si elle existe, None sinon
     */
    def getReponse(adresse: String): Option[String] = {
        val statement = connection.prepareStatement("SELECT Reponse FROM Politesse WHERE Adresse = ?")
        statement.setString(1, adresse)
        val resultSet = statement.executeQuery()
        val adresseOpt = if (resultSet.next()) Some(resultSet.getString("Reponse")) else None
        resultSet.close()
        statement.close()
        adresseOpt
    }
}
